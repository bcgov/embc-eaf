/**
 * EMBC Expense Authorization
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: apiteam@example.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { ExpenseAuthorizationResponse } from '../model/models';
import { ProblemDetails } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ExpenseAuthorizationService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Creates an Expense Authorization Request.
     * @param event 
     * @param dateTime 
     * @param eAFNo 
     * @param eMBCTaskNo 
     * @param requestingOrg 
     * @param resourceType 
     * @param authName 
     * @param authTelephone 
     * @param authEmail 
     * @param description 
     * @param amountRequested 
     * @param expenditureNotToExceed 
     * @param eocApprovalsProcessingApprovedBy 
     * @param eocApprovalsProcessingPosition 
     * @param eocApprovalsProcessingApprovalDateTime 
     * @param eocApprovalsExpenditureRequestApprovedBy 
     * @param eocApprovalsExpenditureRequestPosition 
     * @param eocApprovalsExpenditureRequestApprovalDateTime 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiExpenseAuthorizationPost(event?: string, dateTime?: string, eAFNo?: string, eMBCTaskNo?: string, requestingOrg?: string, resourceType?: string, authName?: string, authTelephone?: string, authEmail?: string, description?: string, amountRequested?: number, expenditureNotToExceed?: number, eocApprovalsProcessingApprovedBy?: string, eocApprovalsProcessingPosition?: string, eocApprovalsProcessingApprovalDateTime?: string, eocApprovalsExpenditureRequestApprovedBy?: string, eocApprovalsExpenditureRequestPosition?: string, eocApprovalsExpenditureRequestApprovalDateTime?: string, files?: Array<Blob>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ExpenseAuthorizationResponse>;
    public apiExpenseAuthorizationPost(event?: string, dateTime?: string, eAFNo?: string, eMBCTaskNo?: string, requestingOrg?: string, resourceType?: string, authName?: string, authTelephone?: string, authEmail?: string, description?: string, amountRequested?: number, expenditureNotToExceed?: number, eocApprovalsProcessingApprovedBy?: string, eocApprovalsProcessingPosition?: string, eocApprovalsProcessingApprovalDateTime?: string, eocApprovalsExpenditureRequestApprovedBy?: string, eocApprovalsExpenditureRequestPosition?: string, eocApprovalsExpenditureRequestApprovalDateTime?: string, files?: Array<Blob>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ExpenseAuthorizationResponse>>;
    public apiExpenseAuthorizationPost(event?: string, dateTime?: string, eAFNo?: string, eMBCTaskNo?: string, requestingOrg?: string, resourceType?: string, authName?: string, authTelephone?: string, authEmail?: string, description?: string, amountRequested?: number, expenditureNotToExceed?: number, eocApprovalsProcessingApprovedBy?: string, eocApprovalsProcessingPosition?: string, eocApprovalsProcessingApprovalDateTime?: string, eocApprovalsExpenditureRequestApprovedBy?: string, eocApprovalsExpenditureRequestPosition?: string, eocApprovalsExpenditureRequestApprovalDateTime?: string, files?: Array<Blob>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ExpenseAuthorizationResponse>>;
    public apiExpenseAuthorizationPost(event?: string, dateTime?: string, eAFNo?: string, eMBCTaskNo?: string, requestingOrg?: string, resourceType?: string, authName?: string, authTelephone?: string, authEmail?: string, description?: string, amountRequested?: number, expenditureNotToExceed?: number, eocApprovalsProcessingApprovedBy?: string, eocApprovalsProcessingPosition?: string, eocApprovalsProcessingApprovalDateTime?: string, eocApprovalsExpenditureRequestApprovedBy?: string, eocApprovalsExpenditureRequestPosition?: string, eocApprovalsExpenditureRequestApprovalDateTime?: string, files?: Array<Blob>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: this.encoder});
        }

        if (event !== undefined) {
            formParams = formParams.append('Event', <any>event) as any || formParams;
        }
        if (dateTime !== undefined) {
            formParams = formParams.append('DateTime', <any>dateTime) as any || formParams;
        }
        if (eAFNo !== undefined) {
            formParams = formParams.append('EAFNo', <any>eAFNo) as any || formParams;
        }
        if (eMBCTaskNo !== undefined) {
            formParams = formParams.append('EMBCTaskNo', <any>eMBCTaskNo) as any || formParams;
        }
        if (requestingOrg !== undefined) {
            formParams = formParams.append('RequestingOrg', <any>requestingOrg) as any || formParams;
        }
        if (resourceType !== undefined) {
            formParams = formParams.append('ResourceType', <any>resourceType) as any || formParams;
        }
        if (authName !== undefined) {
            formParams = formParams.append('AuthName', <any>authName) as any || formParams;
        }
        if (authTelephone !== undefined) {
            formParams = formParams.append('AuthTelephone', <any>authTelephone) as any || formParams;
        }
        if (authEmail !== undefined) {
            formParams = formParams.append('AuthEmail', <any>authEmail) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('Description', <any>description) as any || formParams;
        }
        if (amountRequested !== undefined) {
            formParams = formParams.append('AmountRequested', <any>amountRequested) as any || formParams;
        }
        if (expenditureNotToExceed !== undefined) {
            formParams = formParams.append('ExpenditureNotToExceed', <any>expenditureNotToExceed) as any || formParams;
        }
        if (eocApprovalsProcessingApprovedBy !== undefined) {
            formParams = formParams.append('EocApprovals.Processing.ApprovedBy', <any>eocApprovalsProcessingApprovedBy) as any || formParams;
        }
        if (eocApprovalsProcessingPosition !== undefined) {
            formParams = formParams.append('EocApprovals.Processing.Position', <any>eocApprovalsProcessingPosition) as any || formParams;
        }
        if (eocApprovalsProcessingApprovalDateTime !== undefined) {
            formParams = formParams.append('EocApprovals.Processing.ApprovalDateTime', <any>eocApprovalsProcessingApprovalDateTime) as any || formParams;
        }
        if (eocApprovalsExpenditureRequestApprovedBy !== undefined) {
            formParams = formParams.append('EocApprovals.ExpenditureRequest.ApprovedBy', <any>eocApprovalsExpenditureRequestApprovedBy) as any || formParams;
        }
        if (eocApprovalsExpenditureRequestPosition !== undefined) {
            formParams = formParams.append('EocApprovals.ExpenditureRequest.Position', <any>eocApprovalsExpenditureRequestPosition) as any || formParams;
        }
        if (eocApprovalsExpenditureRequestApprovalDateTime !== undefined) {
            formParams = formParams.append('EocApprovals.ExpenditureRequest.ApprovalDateTime', <any>eocApprovalsExpenditureRequestApprovalDateTime) as any || formParams;
        }
        if (files) {
            if (useForm) {
                files.forEach((element) => {
                    formParams = formParams.append('files', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('files', files.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<ExpenseAuthorizationResponse>(`${this.configuration.basePath}/api/ExpenseAuthorization`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
